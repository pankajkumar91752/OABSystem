// <auto-generated />
using System;
using AccountManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountManagement.Migrations
{
    [DbContext(typeof(OABSystemContext))]
    [Migration("20241004110135_intitial")]
    partial class intitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountManagement.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthcareProfessionalId")
                        .HasColumnType("int");

                    b.Property<string>("PatientContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonForAppointment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AppointmentId");

                    b.HasIndex(new[] { "HealthcareProfessionalId" }, "IX_Appointment_HealthcareProfessionalId1");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDateTime = new DateTime(2024, 10, 5, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            HealthcareProfessionalId = 0,
                            PatientContact = "1234567890",
                            PatientName = "John Doe",
                            ReasonForAppointment = "Annual check-up"
                        });
                });

            modelBuilder.Entity("AccountManagement.Models.HealthcareProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HealthcareProfessional");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            Name = "Dr. Kumar"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Dr. N"
                        });
                });

            modelBuilder.Entity("AccountManagement.Models.Appointment", b =>
                {
                    b.HasOne("AccountManagement.Models.HealthcareProfessional", "HealthcareProfessional")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthcareProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_HealthcareProfessional_HealthcareProfessionalId1");

                    b.Navigation("HealthcareProfessional");
                });

            modelBuilder.Entity("AccountManagement.Models.HealthcareProfessional", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
